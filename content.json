{"pages":[{"title":"About","text":"关于我 只是一个人 目标是赚钱实现人生价值和喜欢的人一起旅行 就读于泰州学院计算机科学与技术系 博客只是爱好 学习总结的平台 如果你喜欢 欢迎与我交流2390783693@qq.com 学习搭建博客参考黑石博客！","link":"/about/index.html"}],"posts":[{"title":"","text":"一：菜单栏 1234567文件：alt+F编辑：alt+E段落：alt+P格式：alt+O视图：alt+V主题：alt+T帮助：alt+H 二：文件 12345678新建：Ctrl+N新建窗口：Ctrl+Shift+N打开：Ctrl+O快速打开：Ctrl+P保存：Ctrl+S另存为：Ctrl+Shift+S偏好：Ctrl+,关闭：Ctrl+W 三：编辑 123456789101112131415161718撤销：Ctrl+Z重做：Ctrl+Y剪切：Ctrl+X复制：Ctrl+C粘贴：Ctrl+V复制为MarkDown：Ctrl+Shift+C粘贴为纯文本：Ctrl+Shift+V全选：Ctrl+A选中当前行/句：Ctrl+L选中当前格式文本：Ctrl+E选中当前词：Ctrl+D跳转到文首：Ctrl+Home跳转到所选内容：Ctrl+J跳转到文末：Ctrl+End查找：Ctrl+F查找下一个：F3查找上一个：Shift+F3替换：Ctrl+H 四：段落 123456789101112标题：Ctrl+1/2/3/4/5段落：Ctrl+0增大标题级别：Ctrl+=减少标题级别：Ctrl+-表格：Ctrl+T代码块：Ctrl+Shift+K公式块：Ctrl+Shift+M引用：Ctrl+Shift+Q有序列表：Ctrl+Shift+[无序列表：Ctrl+Shift+]增加缩进：Ctrl+]减少缩进：Ctrl+[ 五：格式 12345678加粗：Ctrl+B斜体：Ctrl+I下划线：Ctrl+U代码：Ctrl+Shift+`删除线：Alt+Shift+5超链接：Ctrl+K图像：Ctrl+Shift+I清除样式：Ctrl+ 六：视图 12345678910111213显示隐藏侧边栏：Ctrl+Shift+L大纲视图：Ctrl+Shift+1文档列表视图：Ctrl+Shift+2文件树视图：Ctrl+Shift+3源代码模式：Ctrl+/专注模式：F8打字机模式：F9切换全屏：F11实际大小：Ctrl+Shift+0放大：Ctrl+Shift+=缩小：Ctrl+Shift+-应用内窗口切换：Ctrl+Tab打开DevTools：Shift+F12","link":"/posts/0.html"},{"title":"我的第一个博客","text":"缘起​ 这是在2022年寒假，苏州新冠疫情比较严重的时候，也是因为这原因无奈只好推迟返校。就是在这个时候偶然浏览网页看见了一个计算机新手写的个人博客，里面的内容虽然不及csdn上的懂哥业界大牛写的那么好，无非也就是一些简单的编程语言入门的笔记，一项技术的学习计划等，但是总结的还是十分详细的。就是因为他引起了我的兴趣，想着也顺便提升一下自己的总结能力，当然也为我枯燥的隔离生活添点乐趣~ 前期准备​ 当然万事开头难，想要搭建好自己的个人博客不是件容易的事至少对非科班出生的。在搭建前我查阅了非常多的资料，在youtube上看了许多博主教学视频（假期我自建了线路可以科学上网），他们介绍了许多像WordPress等架构来搭建个人博客，但问题什么是架构？ ​ 后来我了解到这些架构就是一个框架就是可以复用的代码，就是“不要重复造轮子”中的“轮子”，就是别人已经写好的封装了各种复杂 API 的库。框架可以帮你完成一些基础语法本身也可以完成的事情，让你不必在建房子的时候从烧砖开始，而是可以解放思维直接开始画楼房设计图。所以我选择了一种叫Hexo的架构。 Hexo​ Hexo，就是一个可以帮助你生成静态网页的一个工具，所有的核心功能比如打标签归档加时间，以及界面美化工作都帮你做好了，你可以专注于博客内容的创作，而不必学习如何“烧砖”（写前端代码）。网上搜索“hexo”，可以找到它的官网。hexo 的官网文档做得非常好，不仅提供准确的中文版文档，还附有视频，让我学得非常之愉快。 Nodw.js​ 这是在安装hexo架构时必要的工具之一。Node.js 是一个让 JavaScript 运行在服务端的开发平台，官方说是什么它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言感觉就是nb咯。当让他里面自带的npm也很重要，理解为一个安装程序吧，我也不知道~~~ Git​ 这是让我很意外的在我电脑里竟然下载了git——版本控制系统（上课用到过），git 的安装和使用就不多说了。用于将 hexo 生成好的页面给推送到 github 这个远程库里。 创建博客​ 做到这步真的不容易，在我本地创建完第一次测试时Hello World，也是十分兴奋。当然中间有许多问题也有想算了，还好坚持下来，还是很有成就感的。 ​ 如你所见，你现在看见的是我经过不断优化，读了上千条代码，慢慢了解这些构架的意思，毕竟六级才过没多少分，英文水平真的不太行。不过好在我完成了优化，奖励自己清购物车！ 步骤总结由于网上教程很多，我在这里只是简单把我部署博客的步骤总结一下： 开一个 github 空仓库 在一个本地空文件夹内初始化 hexo 此文件夹内，与远程库建立关联 给_config.yml文件内deploy属性设置好type（: git，记得冒号后面有个空格）、url（github 仓库的链接）和branch（推送到的分支，一般用 master） 修改其他配置比如title、author、new_post_name、language、post_asset_folder 安装一个 git 部署npm install --save hexo-deployer-git 生成并在本地测试页面效果 生成并部署网站hexo d -g 新建，编辑文章然后重复上一步 最后几句话​ 这也只是个开始，当然有很多不足慢慢来吧，虽说我之后不一定有空来运营，但是还是会偶尔总结一下近期学到的东西，方便自己复习吧，当然也是大家共同进步的一点力量。 ​ 这个寒假真的相当充实，志愿者也是相当的累，还是收获多吧。 ​ 最后的最后附上几张志愿时照片，一方面为了测试一下照片能不能上传，另一方面也是记录一下自己的经历。","link":"/posts/57728.html"},{"title":"书本P92","text":"中缀表达式转后缀表达式(机算)初始化一个栈，用于保存暂时还不能确定运算顺序的运算符。从左到右处理各个元素，直到末尾。可能遇到三种情况:①遇到操作数。直接加入后缀表达式。②遇到界限符。遇到“(”直接入栈;遇到“)”则依次弹出栈内运算符并加入后缀表达式，直到弹出“(”为止。注意:“(”不加入后缀表达式。③遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式,若碰到“(”或栈空则停止。之后再把当前运算符入栈。","link":"/posts/52866.html"},{"title":"","text":"在我们创建节点的时候，我们有时候需要把部分网站的访问IP分配到不同的路由。在X-ui面板上，我们是可以直接操作的。这篇教程就来和大家一起聊聊如何在X-ui设置分流规则，实现一个节点访问不同网站按需分流到不同的IP 准备材料 一台VPS、并已经安装X-ui和设置节点 部署步骤 打开你的X-ui管理面板 转到面板设置→xray相关设置 以下为xray的配置模板，大家可以按照注释的内容配置xray warp linux client 配置模板 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889JSON{ &quot;api&quot;: { &quot;services&quot;: [ &quot;HandlerService&quot;, &quot;LoggerService&quot;, &quot;StatsService&quot; ], &quot;tag&quot;: &quot;api&quot; }, &quot;inbounds&quot;: [{ &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: 62789, &quot;protocol&quot;: &quot;dokodemo-door&quot;, &quot;settings&quot;: { &quot;address&quot;: &quot;127.0.0.1&quot; }, &quot;tag&quot;: &quot;api&quot; }], &quot;outbounds&quot;: [{ &quot;tag&quot;: &quot;IP4-out&quot;, &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: {} }, { &quot;tag&quot;: &quot;IP6-out&quot;, &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: { &quot;domainStrategy&quot;: &quot;UseIPv6&quot; } }, { &quot;tag&quot;: &quot;socks5-warp&quot;, &quot;protocol&quot;: &quot;socks&quot;, &quot;settings&quot;: { &quot;servers&quot;: [{ &quot;address&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: 40000 //warp socks5端口 }] } } ], &quot;policy&quot;: { &quot;system&quot;: { &quot;statsInboundDownlink&quot;: true, &quot;statsInboundUplink&quot;: true } }, &quot;routing&quot;: { &quot;rules&quot;: [{ &quot;type&quot;: &quot;field&quot;, &quot;outboundTag&quot;: &quot;IP6-out&quot;, &quot;domain&quot;: [&quot;ipget.net&quot;] //自定义域名走IPv6出口，例：[&quot;geosite:netflix&quot;,&quot;geosite:*****&quot;]或[&quot;netflix.com&quot;,&quot;****.**&quot;] }, { &quot;type&quot;: &quot;field&quot;, &quot;outboundTag&quot;: &quot;socks5-warp&quot;, &quot;domain&quot;: [&quot;geosite:google&quot;] //自定义域名走socks5 warp出口，例：[&quot;geosite:netflix&quot;,&quot;geosite:*****&quot;]或[&quot;netflix.com&quot;,&quot;****.**&quot;] }, { &quot;type&quot;: &quot;field&quot;, &quot;outboundTag&quot;: &quot;IP4-out&quot;, &quot;network&quot;: &quot;udp,tcp&quot; //除上述规则外，其他连接走IPv4出口 }, { &quot;inboundTag&quot;: [ &quot;api&quot; ], &quot;outboundTag&quot;: &quot;api&quot;, &quot;type&quot;: &quot;field&quot; }, { &quot;ip&quot;: [ &quot;geoip:private&quot; ], &quot;outboundTag&quot;: &quot;blocked&quot;, &quot;type&quot;: &quot;field&quot; }, { &quot;outboundTag&quot;: &quot;blocked&quot;, &quot;protocol&quot;: [ &quot;bittorrent&quot; ], &quot;type&quot;: &quot;field&quot; } ] }, &quot;stats&quot;: {}} IPv4+IPv6配置模板 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374JSON{ &quot;api&quot;: { &quot;services&quot;: [ &quot;HandlerService&quot;, &quot;LoggerService&quot;, &quot;StatsService&quot; ], &quot;tag&quot;: &quot;api&quot; }, &quot;inbounds&quot;: [{ &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: 62789, &quot;protocol&quot;: &quot;dokodemo-door&quot;, &quot;settings&quot;: { &quot;address&quot;: &quot;127.0.0.1&quot; }, &quot;tag&quot;: &quot;api&quot; }], &quot;outbounds&quot;: [{ &quot;tag&quot;: &quot;IP4-out&quot;, &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: {} }, { &quot;tag&quot;: &quot;IP6-out&quot;, &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: { &quot;domainStrategy&quot;: &quot;UseIPv6&quot; } } ], &quot;policy&quot;: { &quot;system&quot;: { &quot;statsInboundDownlink&quot;: true, &quot;statsInboundUplink&quot;: true } }, &quot;routing&quot;: { &quot;rules&quot;: [{ &quot;type&quot;: &quot;field&quot;, &quot;outboundTag&quot;: &quot;IP6-out&quot;, &quot;domain&quot;: [&quot;ipget.net&quot;] //自定义域名走IPv6出口，例：[&quot;geosite:netflix&quot;,&quot;geosite:*****&quot;]或[&quot;netflix.com&quot;,&quot;****.**&quot;] }, { &quot;type&quot;: &quot;field&quot;, &quot;outboundTag&quot;: &quot;IP4-out&quot;, &quot;network&quot;: &quot;udp,tcp&quot; //除上述规则外，其他连接走IPv4出口 }, { &quot;inboundTag&quot;: [ &quot;api&quot; ], &quot;outboundTag&quot;: &quot;api&quot;, &quot;type&quot;: &quot;field&quot; }, { &quot;ip&quot;: [ &quot;geoip:private&quot; ], &quot;outboundTag&quot;: &quot;blocked&quot;, &quot;type&quot;: &quot;field&quot; }, { &quot;outboundTag&quot;: &quot;blocked&quot;, &quot;protocol&quot;: [ &quot;bittorrent&quot; ], &quot;type&quot;: &quot;field&quot; } ] }, &quot;stats&quot;: {}}","link":"/posts/1.html"},{"title":"第一章绪论","text":"数据结构 基本概念：数据元素是数据的基本单位，通常作为一个整体进行考虑和处理，一个数据元素可由若干个数据项组成； 数据项是构成数据元素的不可分割的最小单位； 数据对象：具有相同性质的数据元素的集合，是数据的一个子集； 数据结构：相互之间存在一种或多种特定关系的数据元素的集合； PS:同样的数据元素可以组成不同的数据结构，不同的数据元素可以组成相同的数据结构 数据类型：一个值的集合和定义在此集合上的一组操作的总称{原子类型、结构类型、抽象数据类型}； 数据类型 定义 原子类型 其值不可再分的数据类型（int bool等） 结构类型 其值可以再分解为若干成分的数据类型(struct) 抽象数据类型ADT 抽象数据组织及与之相关的操作(就是用户要知道的运算) 数据结构三要素：逻辑结构：逻辑结构是指数据元素之间的逻辑关系；集合结构（不是重点），线性结构（一对一关系都有唯一前驱除尾部没有后继），树形结构（一对多），图结构（网状结构多对多）； 数据的运算：针对某种逻辑结构，定义基本运算；例：线性结构（插入，删除，查找）； 存储结构（物理结构）类型：顺序存储（连续存放），链式存储（逻辑上相邻的物理位置上不相邻通过指针），索引存储（索引表），散列存储（Hash关键字算出）； PS：存储结构会影响存储空间分配方便程度，影响对数据运算的速度 算法的基本概念：定义：算法是针对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令表示一个或多个操作； 算法的特性：有穷性（一个算法必须总在执行有穷步之后结束，且每一步都在有穷时间内完成）； ​ 确定性 （算法中每条指令必须有确切含义，对于相同的输入只能得出相同的输出）； ​ 可行性 （基本运算执行有限次）； ​ 输入 （0或多个输入）； ​ 输出 （有1或多个输出）； 好的算法特质： 正确性：正确结果 可读性：帮助人们理解 // 注释 健壮性：输入数据非法时，能够适当的作出反应或相应处理，不会产生莫名其妙的输出结果 高效性：时间复杂度和空间复杂度（重点考点） 算法效率的度量和机器性能，编程语言，指令质量有关，有些不能事后再统计 算法时间复杂度（重点）大O表示法：多项相加只考虑阶数高的部分并且系数变为1 T(n)=T1（n）+T2(n)=O(max(f(n),g(n)))；多项相乘，都保留; 排序：O(1)&lt;O(log2N)&lt;O(n)&lt;O(nlog2N)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n) 口诀：常对幂指阶 PS：1、顺序执行的代码只会影响常数项，可以忽略；2、只需挑循环中的一个基本操作分析它的执行次数与n的关系即可； 3、如果有多层嵌套循环，只需关注最深层循环循环了几次； 算法空间复杂度表示为S（n)，算法所需要的空间为常数时叫做算法原地工作，和时间复杂度一样只考虑高阶； 只需要看和问题规模相关的变量n； 函数递归调用时，空间复杂度等于递归调用的深度（考研大多情况）","link":"/posts/28074.html"},{"title":"","text":"宝塔界面相关 12345678Centos安装宝塔面板脚本：yum install -y wget &amp;&amp; wget -O install.sh http://v7.hostcli.com/install/install_6.0.sh &amp;&amp; sh install.shubuntu安装宝塔面板脚本：wget -O install.sh http://v7.hostcli.com/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh放行8888端口命令：iptables -I INPUT -p tcp --dport 8888 -j ACCEPT 宝塔中反代代码 1234567891011121314151617181920212223242526272829303132333435363738394041location /{ proxy_pass http://127.0.0.1:8008; proxy_set_header Host $host;}location /ws{ proxy_pass http://127.0.0.1:8008; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;Upgrade&quot;; proxy_set_header Host $host;}location /terminal{ proxy_pass http://127.0.0.1:8008; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;Upgrade&quot;; proxy_set_header Host $host;}","link":"/posts/2.html"},{"title":"第二章线性表","text":"线性表线性表的定义 线性表是具有相同数据类型的n个数据元素的有限序列。其中n为表长，当n=0时线性表是一个空表。若用L命名线性表，则其一般表示为L = ( a 1 , a 2 , . . . , a i , a i + 1 , . . . , a n ) PS:整数递增不能算是线性表（不满足有限）； 特点：除第一个元素外，每个元素有且仅有一个直接前驱。除最后一个元素外，每个元素有且仅有一个直接后继； 基本操作123456789InitList(&amp;L):初始化表。构造一个空的线性表DestoryList(&amp;L):销毁操作ListInsert(&amp;L,i,e):插入操作ListDelete(&amp;L,i,&amp;e):删除操作，并用e返回删除元素的值LocateElem(L,e):按值查找操作，L表中给定关键字值的元素GetElem(L,i):按位查找操作。L表中的第i个位置的元素值Length(L):求表长PrintList(L):输出操作Empty(L):判断操作 Tips:对参数修改需要“带回来”时需要引用“&amp;” 顺序表（顺序存储）重点静态分配 12345#define MaxSize 10 //定义线性表的最大长度typedef struct{ ElemType data[MaxSize]; //顺序表的元素静态的数组 int length; //顺序表的当前长度}SqList; //顺序表的类型定义 动态分配 1234567891011#define InitSize 10 //表长度的初始定义typedef struct{ ElemType *data; //指示动态分配数组的指针 int MaxSize,length; //数组的最大容量和当前个数}SqList; //动态分配数组顺序表的类型定义//C的初始动态分配语句L.data = (ElemType*)malloc(sizeof(ElemType)*InitSize);free(L);//C++的初始动态分配语句L.data = new ElemType[InitSize];delete L; 顺序表特点： 1.随机访问2.存储密度高3.拓展容量不方便4.插删数据元素不方便； 单链表（带头节点和不带头节点）1234typedef struct LNode{ //定义单链表结点类型 ElemType data; //数据域 每个节点放一个数据元素 struct LNode *next; //指针域 指针指向下一个节点}LNode, *LinkList; //LinkList为指向结构体LNODE的指针类型 Tips: 1、LinkList等价于LNode *；2、带头结点的空表定义 L-&gt;next==NULL写代码更方便；3注意考试时判断是否是有头节点； 创建单链表123456789101112131415LinkList List_HeadInsert(LinkList &amp;L){ LNode *s; int x; L=(LinkList)malloc(sizeof(LNode));//创建头结点 L-&gt;next = NULL; //初始为空链表 scanf(&quot;%d&quot;,&amp;x); while(x!=9999){ //表示输入9999结束 s = (LNode*)malloc(sizeof(LNode));//创建新结点 s-&gt;data = x; s-&gt;next = L-&gt;next; L-&gt;next = s;//将新结点插入表中，L为头指针 scanf(&quot;%d&quot;,&amp;x); } return L;} 头插法逆置（重点考点） 123456789LNode *p,*q;p=L-&gt;next;L-&gt;next=NULL; //断链while(p){q=p-&gt;next; p-&gt;next=L-&gt;next;L-&gt;next=p;p=q;}return L 双链表（带头结点）插入 12345s-&gt;next=p-&gt;next;if(p-&gt;next)p-&gt;next-&gt;prior=s;s-&gt;prior=p;p-&gt;next=s; 循环链表头结点的next指向头结点L-&gt;next=L 静态链表分配一整片连续的存储空间，各个结点集中安置（其中0号结点为头结点不放数据），游标充当指针（当游标为-1表示已经达到表尾） 123456789#define MaxSize 10 //静态链表的最大长度typedef struct{ //数据类型的定义 ElemType data; //存储数据元素 int next; //下一个元素的数组下标}SLinkList[MaxSize];void testSLinkList(){ SLinkList a; //。。。。。后续代码} 或者还可以 12345678910#define MaxSize 10 //静态链表的最大长度struct Node{ //数据类型的定义 ElemType data; //存储数据元素 int next; //下一个元素的数组下标};vode testSLinkList(){ struct Node a[MaxSize]; //。。。。后续代码} 静态链表优缺点 优点：增删改查不需要大量移动元素; 缺点：不能随机存储,只能从头结点开始依次往后查，容量固定不可变; 顺序表和链表总结逻辑结构：都属于线性表，都是线性结构； 存储结构：顺序存储VS链式存储； 基本操作：创销、增删改查","link":"/posts/61511.html"},{"title":"","text":"首先安装Docker 12345sudo yum check-updatecurl -fsSL https://get.docker.com/ | shsudo systemctl start dockersudo systemctl status dockersudo systemctl enable docker 之后部署青龙面板 1234567891011docker run -dit \\ --name QL \\ --hostname QL \\ --restart always \\ -p 5700:5700 \\ -v $PWD/QL/config:/ql/config \\ -v $PWD/QL/log:/ql/log \\ -v $PWD/QL/db:/ql/db \\ -v $PWD/QL/scripts:/ql/scripts \\ -v $PWD/QL/jbot:/ql/jbot \\ whyour/qinglong:latest 最后到浏览器输入ip:5700登录即可 青龙面板下安装今日头条极速版 12拉取脚本：ql raw https://gitee.com/jaun920/scripts/raw/master/YM/jrttjsb.js定时设置CRON：1-59/15 6-23 * * * 使用[安卓小黄鸟](链接：https://pan.xunlei.com/s/VN0-vD9U38-MKTPhJTiR-N_hA1提取码：drtj)抓包（ios使用stream） 12345抓包软件抓取目标网址： https://api3-normal-lq.toutiaoapi.com/ https://api3-normal-lq.toutiaoapi.com/luckycat/lite/v1/task/page_data复制全部CK内容即可！需要：1、请求中的user-agent；2、https://api3-normal-lq.toutiaoapi.com/域名下的CK就是Cookie 123456在青龙面板配置文件中## 今日头条极速版export jrttjsbHeader=&quot;install_id=4385289953366941; ttreq=1$0e495e53fb0b7f20447f75ad9ef1642fbef96dbf; passport_csrf_token=db53e748f4fa567cd2d17355582e4c43; passport_csrf_token_default=db53e748f4fa567cd2d17355582e4c43; odin_tt=4f1756c01abf197dea52497f4aa1d30b36b780caab0245ac3392d5a4c97a669792d857443eee03afb7b10cb8d5783eb00ff304ed8860db7d1a7a6a3f2b0c774c; n_mh=UfDUsV_uGTnySydqoQKVZEfwblSgoumuhSnyWpJ2Yuo; d_ticket=ccedbc386fc3193b4de2645cd1306a1f9fd48; sid_guard=d7af6fdf77d248e4c79317ca75d8777b%7C1650335426%7C5184000%7CSat%2C+18-Jun-2022+02%3A30%3A26+GMT; uid_tt=a0a47c3123c82e702a4e1cf02e18b05d; uid_tt_ss=a0a47c3123c82e702a4e1cf02e18b05d; sid_tt=d7af6fdf77d248e4c79317ca75d8777b; sessionid=d7af6fdf77d248e4c79317ca75d8777b; sessionid_ss=d7af6fdf77d248e4c79317ca75d8777b&quot;export jrttjsbUA=&quot;Dalvik/2.1.0 (Linux; U; Android 10; YAL-AL00 Build/HUAWEIYAL-AL00) NewsArticle/8.7.6 cronet/TTNetVersion:f2a033a5 2021-11-02 QuicVersion:705d0b81 2021-08-12&quot;export jrttjsbFarm=&quot;1&quot;export jrttjsbReadNum=&quot;1&quot; 运行程序即可！！！ （详细更多请看教程） 更多:青龙面板领京豆","link":"/posts/3.html"},{"title":"","text":"软件工程期末考试题库选择题具有风险分析的软件生命周期模型是（ C ）。A.瀑布模型 B.喷泉模型 C.螺旋模型 D.增量模型 软件工程的基本要素包括方法、工具和（ A ）。A. 过程 B. 软件系统 C. 硬件环境 D. 人员 软件的复杂性是（ A ），它引起人员通信困难、开发费用超支、开发时间超时等问题。A. 固有的 B. 人为的 C. 可消除的 D. 不可降低的 在结构化分析方法中，（ C ）表达系统内部数据运动的图形化技术。A. 数据字典 B. 实体关系图 C. 数据流图 D. 状态转换图 “软件危机” 是指（ C ）。A.计算机病毒的出现 B．利用计算机进行经济犯罪活动 C．软件开发和维护中出现的一系列问题 D．人们过分迷恋计算机系统 随着软硬件环境变化而修改软件的过程是（ B ）。A．校正性维护 B．适应性维护 C．完善性维护 D．预防性维护 需求分析中开发人员要从用户那里了解（ A ）。A．软件做什么 B．用户使用界面 C．输入的信息 D．软件的规模 软件详细设计的主要任务是确定每个模块的（ A ）。A．算法和使用的数据结构 B．外部接口 C．功能 D．编程 为了提高模块的独立性，模块内部最好是（ C ）。//外部耦合，功能内聚A．逻辑内聚 B．时间内聚 C．功能内聚 D．通信内聚 一个模块的（ C ）太大一般是因为缺乏中间层次，应当适当增加中间层次的控制模块。A．深度 B. 宽度 C. 扇出 D. 扇入 模块的内聚性最高的是（ D ）。A．逻辑内聚 B．时间内聚 C． 偶然内聚 D．功能内聚 需求分析是（ A ）。A. 软件开发工作的基础 B. 软件生存周期的开始 C. 由系统分析员单独完成的 D. 由用户自己单独完成的 在白盒测试技术测试用例的设计中，（ B ）是最强的覆盖标准。A．语句覆盖 B．路径覆盖 C． 条件组合覆盖 D．判定覆盖 软件维护时，对测试阶段未发现的错误进行测试、诊断、定位、纠错，直至修改的回归测试过程称（ A ）。 A. 改正性维护 B. 适应性维护 C. 完善性维护 D. 预防性维护 ( C ) 是把对象的属性和操作结合在一起，构成一个独立的对象，其内部信息对外界是隐蔽的，外界只能通过有限的接口与对象发生联系。 A. 多态性 B. 继承 C. 封装 D. 消息 对象实现了数据和操作的结合，使数据和操作（ C ）于对象的统一体中。A．结合 B．隐藏 C．封装 D．抽象 面向对象的开发方法中，（ C ）将是面向对象技术领域内占主导地位的标准建模语言。A．Booch方法 B．Coad方法 C．UML语言 D．OMT方法 ( A ）意味着一个操作在不同的类中可以有不同的实现方式。A．多态性 B．多继承 C．类的可复用 D．信息隐藏 单元测试的测试用例主要根据（ D ）的结果来设计。A．需求分析 B．源程序 C．概要设计 D．详细设计 软件测试是为了（ B ）而执行程序的过程。A. 纠正错误 B. 发现错误 C. 避免错误 D. 证明正确 21．类构件的重用方式有多态重用、继承重用和（ A ） A．实例重用 B.重载重用 C. 代码重用 D. 方法重用 支持面向对象技术的软件生存周期模型是（ A ）。A.喷泉模型 B.螺旋模型 C.增量模型 D.瀑布模型 在白盒测试技术测试用例的设计中，（ A ）是最弱的覆盖标准。A．语句覆盖 B．路径覆盖 C．条件组合覆盖 D．判定覆盖 下面哪些测试方法属于白盒测试（ A E ）。//BCD是黑盒测试A、基本路径测试 B、等价类划分 C、边界值分析 D、错误推测 E、逻辑覆盖测试 瀑布模型把软件生命周期划分为八个阶段：问题的定义、可行性研究、软件需求分析、系统总体设计、详细设计、编码、测试和运行、维护。八个阶段又可归纳为三个大的阶段：计划阶段、开发阶段和( C )。A、详细计划 B、可行性分析 C、运行阶段 D、测试与排错 从结构化的瀑布模型看，在它的生命周期中的八个阶段中，下面的几个选项中哪个环节出错，对软件的影响最大( C )。A、详细设计阶段 B、概要设计阶段 C、需求分析阶段 D、测试和运行阶段 在结构化的瀑布模型中，哪一个阶段定义的标准将成为软件测试中的系统测试阶段的目标( A )。A、需求分析阶段 B、详细设计阶段 C、概要设计阶段 D、可行性研究阶段 软件工程的出现主要是由于( C )。A.程序设计方法学的影响 B.其它工程科学的影响 C. 软件危机的出现 D.计算机的发展 软件工程方法学的目的是：使软件生产规范化和工程化，而软件工程方法得以实施的主要保证是( C )A、硬件环境 B、软件开发的环境 C、软件开发工具和软件开发的环境 D、开发人员的素质 软件开发常使用的两种基本方法是结构化和原型化方法，在实际的应用中，它们之间的关系表现为 ( B )A、相互排斥 B、相互补充 C、独立使用 D、交替使用 UML是软件开发中的一个重要工具，它主要应用于哪种软件开发方法( C )A、基于瀑布模型的结构化方法 B、基于需求动态定义的原型化方法 C、基于对象的面向对象的方法 D、基于数据的数据流开发方法 软件测试基本方法中，下列 ( D ) 不用测试实例。A). 白盒测试法 B). 动态测试法 C). 黑盒测试法 D). 静态测试法 结构化分析方法是一种预先严格定义需求的方法，它在实施时强调的是分析对象的( B )A、控制流 B、数据流 C、程序流 D、指令流 软件开发的结构化生命周期方法将软件生命周期划分成( A )A、 计划阶段、开发阶段、运行阶段 B、 计划阶段、编程阶段、测试阶段 C、 总体设计、详细设计、编程调试 D、需求分析、功能定义、系统设计 可行性研究主要从以下几个方面进行研究：（ A ）A） 技术可行性，经济可行性，操作可行性 B） 技术可行性，经济可行性，系统可行性 C） 经济可行性，系统可行性，操作可行性 D） 经济可行性，系统可行性，时间可行性 耦合是对软件不同模块之间互连程度的度量。各种耦合按从强到弱排列如下： （ C ）A) 内容耦合，控制耦合，数据耦合，公共环境耦合。 B) 内容耦合，控制耦合，公共环境耦合，数据耦合。 C) 内容耦合，公共环境耦合，控制耦合，数据耦合。 D) 控制耦合，内容耦合，数据耦合，公共环境耦合。 可行性分析研究的目的（ B ）A 争取项目 B 项目值得开发否 C 开发项目 D 规划项目 数据字典是用来定义（ D ）中的各个成分的具体含义A 流程图 B 功能结构图 C 系统结构图 D 数据流图 程序的三种基本控制结构的共同特点是（ C ）A 只能用来描述简单程序 B 不能嵌套使用 C 单入口，单出口 D 仅用于自动控制系统 为高质量的开发软件项目，在软件结构设计时，必须遵循（ A ）原则A 信息隐蔽 B 质量控制 C 程序优化 D 数据共享 黑盒测试在设计测试用例时，主要研究（ A ）A 需求规格说明于概要设计说明 B 详细设计说明 C 项目开发计划 D 概要设计说明与详细设计说明 通过 ( B ) 可以完成数据流图的细化。A). 结构分解 B). 功能分解 C). 数据分解 D). 系统分解 程序流程图 (PDF) 中的箭头代表的是 ( B )A). 数据流 B). 控制流 C). 调用关系 D). 组成关系 软件定义期问题定义阶段涉及的人员有 ( D )A). 用户、使用部门负责人 B). 软件开发人员、用户、使用部门负责人 C). 系统分析员、软件开发人员 D). 系统分析员、软件开发人员、用户、使用部门负责人 ( C )应考虑对模块相联和资源共享问题进行描述和制约。A). 系统设计 B). 详细设计 C). 接口控制 D). 结构化编辑工具 业界存在三种需求分析方法：面向功能分析、面向对象分析和 B 。A．面向算法分析 B．面向数据分析 C．面向程序分析 D．面向硬件分析 软件可维护性的特性中相互矛盾的是 C 。A．可修改性和可理解性 B．可测试性和可理解性 C．效率和可修改性 D．可理解性和可读性 软件测试方法中的 D 属于静态测试方法。A． 黑盒法 B．路径覆盖 C．错误推测 D．人工检测 结构化分析方法采用的基本手段是 A 。A． 分解与抽象 B．分解与综合 C．归纳与推导 D．试探与回溯 可行性研究要进行一次（D）需求分析。A．深入的 B．详尽的 C．彻底的 D．简化的、压缩了的 可维护性的特性中相互促进的是（A）A．可理解性和可测试性 B．效率和可移植性 C．效率和可修改性 D．效率和结构好 （D）是以提高软件质量为目的的技术活动。A．技术创新 B．测试 C．技术创造 D．技术评审 软件测试可能发现软件中的（ B ），但不能证明软件 ( )。A．所有错误，没有错误 B．错误，没有错误 C．逻辑错误，没有错误 D. 设计错误，没有错误 以下不属于软件维护困难表现的是 ©。A．读懂别人的程序是困难的。B．文档的不一致性。C．源程序及相关文档的错误或丢失。D．软件开发和软件维护在人员和时间上的差异。E. 软件维护不是一项吸引人的工作。 软件设计一般分为总体设计和详细设计，它们之间的关系是 (A)。A．全局和局部 B．抽象和具体 C．总体和层次 D．功能和结构 一组语句在程序多处出现，为了节省空间，把这些语句放在一个模块中，该模块的内聚度是（ C ）的。A．逻辑性 B．瞬时性 C．偶然性 D．通信性 在一个课程注册系统中，定义了类 CourseSchedule 和类 Course , 并在类 CourseSchedule 中定义了方法 add (c:Course) 和方法 remove (c:Course)，则类 CourseSchedule 和类 Course 之间的关系是（ C ）。A．泛化关系 B．组合关系 C．依赖关系 D．包含关系 软件策划的上游是（ A ），下游是（ B ）A）需求分析 B）软件设计 C）软件测试 D）可行性分析 概要设计的结果是提供一份 ( A )。A). 模块说明书 B). 框图 C). 程序 D). 数据流图 面向数据流软件设计方法一般是把数据流图中的数据流化分为 (B) 两种流，再将数据流图映射为软件结构。A). 数据流与事务流 B). 交换流和事务流C). 信息流与控制流 D). 交换流和数据流 填空题一般来说，可以从 一致性 、完整性__、现实性____和有效性___四个方面验证软件需求的正确性。 IPO图是 _输入、处理和输出图 _ 的简称，它是美国IBM公司发展完善起来的一种图形工具。 系统流程图是描述__物理模型__的传统工具，用图形符号表达了系统中各种元素之间的__信息流动_____情况。 数据流图中的箭头表示数据流，椭圆或圆形表示数据处理，矩形表示数据的源点/终点。 集成测试的方法主要有 渐增式和非渐增式 。 软件生命周期一般可分为问题定义、可行性研究、需求分析、设计编码、测试、运行与维护阶段。 可行性研究主要集中在以下四个方面经济可行性、技术可行性__、__法律可行性___和抉择。 在结构化设计中，HIPO图应用在总体设计阶段，由IPO图和_层次图_两部分组成。 实施精化设计的目标是基于模块的“高内聚低耦合”的原则，提高模块的_独立性。 按软件的功能进行划分，软件可以划分为 系统软件 ， 支撑软件 ， 应用软件 单元测试一般以白盒测试为主，__黑盒__测试为辅。 面向对象的数据存储管理模式分为__文件__、关系数据库和面向对象数据库三种。 通用体系结构模式有：分层模式、管道与过滤器模式和黑板模式。 成本效益分析的目的是从( 经济 )角度评价开发一个项目是否可行。 自顶向下结合的渐增式测试法，在组合模块时有两种组合策略：深度优先策略和 ( 宽度优先策略 ) 。 汇编语言是面向( 机器 ) 的，可以完成高级语言无法完成的特殊功能，如与外部设备之间的一些接口工作。 详细设计的任务是确定每个模块的内部特性，即模块的算法、( 使用的数据 )。 所有软件维护申请报告要按规定方式提出，该报告也称( 软件问题 )报告。 有两类维护技术：在开发阶段使用来减少错误、提高软件可维护性的面向维护的技术；在维护阶段用来提高维护的效率和质量的( 维护支援 )技术。 科学工程计算需要大量的标准库函数，以便处理复杂的数值计算，可供选择的语言有：( FORTRAN语言)、PASCAL语言、C语言和PL/1语言。 用户界面的 可使用性 是用户界面设计最重要的也是最基本的目标 数据流图 和 数据字典 共同构成系统的逻辑模型 软件测试的方法有 分析方法 和 非分析方法（即黑盒法） 成本估计方法主要有 自底向上估计 、 自顶向下估计 和算法模型估计三种类型 常见的软件概要设计方法有三大类：以数据流图为基础构造模块结构的 结构化设计方法 ，以数据结构为基础构造模块的 Jackson方法 ，以对象、类、继承和通信为基础的 面向对象设计方法。 实用的白盒测试覆盖技术有 4 种：语句覆盖、条件覆盖、分支 (或判定) 覆盖和组合覆盖。 传统软件维护一般分为 4 大类，分别是纠错性维护、适应性维护、完善性维护和预防性维护。 在 V 测试模型中，编码结束后，首先作单元测试，然后是集成测试、系统测试和验收测试。 传统软件维护一般分为 4 大类，分别是纠错性维护、适应性维护、完善性维护和预防性维护。 需求建模的基本方法包括抽象、分解与多视点分析 3 种。 用例之间的关系主要有三种：包含（include）、扩展（extend）和继承。 用于表示分析模型的 UML 图形机制主要是类图、活动图、交互图与状态图。 软件设计基本原则包括抽象与逐步求精、强内聚及松耦合、信息隐藏及关注点分离。 内聚性有 6 种类型 偶然内聚、逻辑内聚、时间内聚、通信内聚、顺序内聚、功能内聚。 一般而言，在面向对象建模过程中，人们最常用的是建立系统的用例图、类图和顺序图。 常用的软件开发方法有结构化方法、面向对象方法和形式化开发方法 内聚性 是模块独立性的衡量标准之一，它是指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。 在结构化分析中，用于描述加工逻辑的主要工具有三种，即：结构化语言、判定表、 判定树 结构化语言是介于自然语言和形式语言之间的一种半形式语言 软件概要设计的主要任务就是软件体系结构的设计 判断题向滞后的项目中增加人手会使得项目更加滞后。（T） 过程描述语言可以用于描述软件的系统结构。（F） 按照瀑布模型开发软件的一条指导思想是清楚地区分逻辑设计与物理设计，以便尽早开始程序的物理实现。（ F ） 只有质量差的软件产品才需要维护。（ F ） 层次图用来描述软件的层次结构。层次图中的一个矩形框代表一个模块，方框间的连线表示模块的组成关系。在层次图中除最顶层的方框之外，给每个方框都加编号，即成为带有编号的层次图。（ F ） 建立动态模型的第一步，是编写典型交互行为的脚本。（ T ） 软件错误可能出现在开发过程的早期，越早修改越好。（T） 软件模块的耦合是越低越好。（ T ） 一个好的测试用例在于能发现至今未发现的错误。（ T ） 面向对象设计的结果只能采用面向对象语言来实现（ F ） 一个成功的项目唯一提交的就是运行程序。（ F ） 用例之间的关系有3种。（ T ） 面向对象设计准则也要遵循弱耦合的原则，但是继承耦合则应该提高，紧密地继承耦合与高度的一般-特殊内聚是一致的。 （ T ） 软件工作的考虑范围主要是程序设计和实现。（ F ） 环形复杂度定量度量程序的逻辑复杂度，可以用这个公式来计算环形复杂度：流图G的环形复杂度V(G) = N– E + 2。（改成E-N+2）（ F ） 等价类划分方法将所有可能的输入数据划分成若干部分，然后从每一部分中选取少数有代表性的数据作为测试用例。（ T ） 在进行总体(改成概要)设计时应加强模块间的联系。（ F ） 系统结构图是精确表达程序结构的图形表示法。因此，有时也可以将系统结构图当作系统流程图使用。（ T ） 建立动态模型的第一步，是编写典型交互行为的脚本。（ T ） 在程序调试时，找出错误的位置和性质比改正该错误更难。（ F ） 如果通过软件测试没有发现错误，则说明软件是正确的。（ F ） 快速原型模型可以有效地适应用户需求的动态变化。（ T ） 模块化，信息隐藏，抽象和逐步求精的软件设计原则有助于得到高内聚，低耦合度的软件产品。（ T ） 集成测试主要由用户来完成。（ F ） 面向对象 = 对象 + 类 + 继承 + 消息传递。（ T ） 面向对象的分析是面向计算机系统建立软件系统的对象模型。（ F ） 软件的开发与运行经常受到硬件的限制和制约。( T ) 模块内的高内聚往往意味着模块间的松耦合。( T ) Jackson图只能表达程序结构，不能表达数据结构。( F ) 软件测试的目的是为了无一遗漏的找出所有的错误。( F ) 软件的质量好坏主要由验收人员负责，其他开发人员不必关心。( F ) 判定覆盖不一定包含条件覆盖，条件覆盖也不一定包含判定覆盖。( T ) 应该尽量使用机器语言编写代码，提高程序运行效率，而减少高级语言的使用。( F ) UML只能应用于软件系统模型的建立。( F ) 容错就是每个程序采用两种不同的算法编写。( F ) 简答题简述软件设计的过程。软件设计是把许多事物和问题抽象起来，并且抽象它们不同层次和角度，是将需求转变为软件陈述的过程，是迭代的过程。 软件设计，要根据需求规格说明书，对整个设计过程进行计划，然后实施具体的设计过程，即“先整体，再局部”，也是不断迭代和精化的过程。 然后需要对生成的设计规格说明书进行评审，启动 质量评价的标准，若未通过评审，需重新修改设计，直至评审通过，确定最后定型的过程本身。进入后续阶段，完成软件设计过程。 简述结构化程序设计方法的基本特点。1）尽可能少用goto语句的程序设计方法。 2）每个代码块都单入单出。 3）使用控制结构：顺序、选择和循环。 4） 自顶向下逐步求精。 衡量模块独立性的两个定性标准是什么？这两个标准的定义分别是什么？在我们的软件设计中，关于模块独立性我们追求的目标是什么？衡量模块独立性的两个定性标准是内聚和耦合（2分）。 耦合是指对一个软件结构内不同模块彼此之间互相依赖（连接）的紧密程度；而内聚则标志一个模块内部各个元素彼此结合的紧密程度（2分）。 在我们的软件设计中，关于模块独立性我们追求的目标是紧密内聚松散耦合（1分）。 什么是黑盒测试法？黑盒测试法把程序看成一个黑盒子，完全不考虑程序的内部结构和处理过程（2分）。 它只检查程序功能是否能按照规格说明书的规定正常使用（1分）， 程序是否能适当地接收输入数据（1分）， 产生正确地输出信息（1分）。 如何选择程序设计语言的工程特性1.系统用户的要求 2.可以使用的编译程序 3.可以得到的软件工具 4.工程规模 5.程序员的知识 6.软件可移植性的要求 7.软件的应用领域 简述面向对象的4个要点的含义。面向对象的４个要点是：对象分解、数据专有、继承、封装性。（１分） 1）对象分解：认为客观世界是由各种对象组成的。 （１分） 2）数据专有，方法共享：把所有对象都划分成各种对象类(简称为类，class)，每个对象类都定义了一组数据和一组方法。 （１分） 3）继承：按照子类(或称为派生类)与父类(或称为基类)的关系，把若干个对象类组成一个层次结构的系统(也称为类等级)。（１分） 4）封装性：对象彼此之间仅能通过传递消息互相联系。（１分） 软件维护的过程在软件开发完成交付用户使用后，为了保证软件在一个相当长的时期能够正常运行，就需要对软件进行维护。 软件维护的过程： （1） 确认维护要求。（1分） （2） 对于改正性维护申请，评价错误的严重性。对于严重的错误，立即安排人员，分析问题原因，进行”救火”性的紧急维护；对于不严重的错误，根据任务情况和轻重缓急进行统一安排。（2分） （3） 对于适应性和完善性维护申请，需要确定申请的优先级，然后安排维护工作。并不是所有的完善性维护申请都必须承担，需要考虑商业需要、现有资源、未来发展方向等进行决定。（2分） 软件维护的目的和主要任务是什么？维护的类型有哪些？软件维护是软件生命周期中最后一个、持续时间最长的阶段。 主要任务是在软件已经交付使用之后，为了改正错误或满足新的需要而修改软件。 目的是提高软件的可靠性、可用性，延长软件的寿命。 维护的类型有：改正性（错误）、适应性（环境）、完善性（功能）、预防性（新产品） 什么是耦合?模块的耦合包括哪些类型？耦合是对一个软件结构内不同模块之间互连程度的度量。 模块的耦合包括以下几种类型：数据耦合，控制耦合，特征耦合，公共环境耦合，内容 耦合，标记耦合，无耦合/非直接耦合 什么是内聚?模块的内聚包括哪些类型？内聚标志着一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展 模块的内聚包括以下几种类型：低内聚 — 偶然内聚，逻辑内聚，时间内聚 中内聚 — 过程内聚，通信内聚； 高内聚 — 顺序内聚，功能内聚 什么是编码风格?为什么要强调编码风格?编码风格包括以下内容：程序内部良好的文档（注释）、数据说明、语句构造、输入输出和效率保障等。 因为编码风格对软件的可读性、可维护性、可靠性、可用性很重要，所以要强调编码风格。 什么是软件危机？软件危机的表现是什么？其产生的原因是什么？软件发展的第二阶段末期，由于计算机硬件技术的进步，计算机运行速度、容量、可靠性有显著的提高，生产成本显著下降，这为计算机的广泛应用创造了条件。一些复杂的，大型的软件开发项目提出来了，但是，软件开发技术的进步一直未能满足发展的需要。在软件开发中遇到的问题找不到解决方法，使问题积累起来，形成了尖锐的矛盾，因此导致了软件危机。 软件危机表现在以下四个方面：（钱与时间，要求，维护性，可靠性） （1）经费预算经常突破，完成时间一再拖延。（2）开发的软件不能满足用户要求（3）开发的软件维护性差（4）开发的软件可靠性差造成软件危机的原因：（规模和结构，管理，经费，技术，工具） （1）软件的规模越来越大，结构越来越复杂（2）软件开发管理困难而复杂（3）软件开发的经费不断增加（4）软件开发技术落后（5）生产方式落后开发工具落后，生产率提高缓慢软件生存周期包括哪些活动？答：软件生存周期的活动包括：可行性分析和项目开发计划、需求分析、概要设计、详细设计、编码、测试、维护等活动。 请说明 “三个模型” 的定义，以及三者之间的关系。功能模型是描述系统能做什么，即对系统的功能、性能、接口和界面进行定义。业务模型是描述系统在何时、何地、由何角色、按什么业务规则去做，以及做的步骤或流程，即对系统的操作流程进行定义。数据模型是描述系统工作前的数据来自何处，工作中的数据存什么地方，工作后的数据放到何处，以及这些数据之间的关联，即对系统的数据结构进行定义。功能模型和业务模型是在需求分析时建模，是两个基本点。数据模型是一个中心，在设计时建模。功能模型和业务模型给数据模型提供数据与维护数据，数据模型支持功能模型和业务模型的正常运行。通常，数据模型建模用 Power Designer，ER win 或 Oracle Designer 工具实现；功能模型用功能点列表（或用况图）表示；业务模型用自然语言加上流程图（或顺序图）表示。 “面向对象实现” 的目标是什么？答：“面向对象实现” 的目标是：按照《详细设计说明书》中对数据结构、算法分析和模块实现等方面的设计说明，用面向对象的语言，将这些部件组装起来，分别实现各模块的功能，从而实现目标系统的功能、性能、接口、界面等要求。 软件工程的定义（1）将系统的、规范的、可量化的方法应用于软件的开发、运行和维护的过程；（2）及上述方法的研究。画图题1.已知有一段代码实现了 “输出ABC三个数中的最大值”，要求完成下列问题： （1）画出代码的流程图（4分） （2）根据该程序流程图画出该程序的流图；（4分） （3）计算该流图的环形复杂度；（4分） （3） 环形复杂度 V(G) = 区域数 = 边数 - 节点数 + 2 = 判定点 + 1 = 4 2.某“调整工资”处理模块接受一个“职称”的变量，根据职称的不同（助教，讲师，副教授，教授）作不同的处理，其中若是助教还必须输入工龄，只有工龄超过两年才能调整工资。请用等价类划分法设计测试用例。 3.银行计算机储蓄系统的工作过程大致如下：储户填写的存款单或取款单由业务员键入系统，如果是存款则系统记录存款人姓名、住址 (或电话号码)、身份证号码、存款类型、存款日期、到期日期、利率及密码 (可选) 等信息，并印出存单给储户；如果是取款而且存款时留有密码，则系统首先核对储户密码，若密码正确或存款时未留密码，则系统计算利息并印出利息清单给储户。用数据流图描绘本系统的功能，要求绘出数据处理、数据存储、数据流和相关角色。","link":"/posts/4.html"}],"tags":[{"name":"闲谈","slug":"闲谈","link":"/tags/%E9%97%B2%E8%B0%88/"},{"name":"学习笔记","slug":"学习笔记","link":"/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"categories":[{"name":"博客学习","slug":"博客学习","link":"/categories/%E5%8D%9A%E5%AE%A2%E5%AD%A6%E4%B9%A0/"},{"name":"考研","slug":"考研","link":"/categories/%E8%80%83%E7%A0%94/"}]}